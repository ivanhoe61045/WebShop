@model WebShopSite.Models.WebShopViewModels.ProdutCreationViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "Product", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProdutCreationViewModel</h4>
        <hr />
        <label class="alert-danger">@ViewBag.ErrorMessage</label>
        <label class="alert-success">@ViewBag.Message</label>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ProducName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProducName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProducName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IdGender, "Gender", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdGender", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdGender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group file-caption-main">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="control-label">Select File(.jpg, .png, .gif)</label>
                <input id="input-Image" name="input7[]" multiple type="file" class="file file-loading form-control" data-show-caption="true" accept=".jpg,.gif,.png">
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.State)
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <label class="control-label col-md-2">Categories</label>
                @if (Model != null)
                {
                    for (var i = 0; i < Model.ListCategories.Count(); i++)
                    {
                        var category = Model.ListCategories[i];
                        @Html.HiddenFor(model => model.ListCategories[i].IdCategory)
                        @Html.HiddenFor(model => model.ListCategories[i].CategoryName)
                        @Html.CheckBoxFor(model => model.ListCategories[i].CatergoryState)
                        @Html.LabelFor(model => model.ListCategories[i].CategoryName, category.CategoryName)
                    }
                }
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
                <button id="Submit">Submit with LocalStorage</button>
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/modernizr")
    <script>
        $(function () {
            $("#Submit").click(function () {
                var productInfo = {
                    "ProducName": $("#ProducName").val(),
                    "Title": $("#Title").val(),
                    "Price": $("#Price").val(),
                    "Description": $("#Description").val(),
                    "IdGender": $("#IdGender").val(),
                    "Image": $("#input-Image").val(),
                };
                if (Modernizr.localstorage) {
                    var localProduct = window.localStorage;
                    var custProduct = JSON.stringify(productInfo);
                    localProduct.setItem("Product" + $("#ProducName").val(), custProduct);
                    alert("Data in localstorage");
                }
            });
        });
    </script>
}
